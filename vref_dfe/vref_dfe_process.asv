% VREF calculations
%

    
  

    if Ndfe == 0 || n < Ndfe+2
        dk(n) = ynffeo(n);
    else
        temp = zeros(length(dk_hat(n-1:-1:max(n-Ndfe,1))),1);
        for ii = 1:1:length(temp)
            switch(dk_hat(n-ii-1))
                case 1
                    switch(dk_hat(n-ii-2))
                        case 1
                            temp(ii) = tgt(1,1);
                        case 1/3
                            temp(ii) = tgt(1,2);
                        case -1/3
                            temp(ii) = tgt(1,3);
                        case -1
                            temp(ii) = tgt(1,4);
                    end
                case 1/3
                    switch(dk_hat(n-ii-2))
                        case 1
                            temp(ii) = tgt(2,1);
                        case 1/3
                            temp(ii) = tgt(2,2);
                        case -1/3
                            temp(ii) = tgt(2,3);
                        case -1
                            temp(ii) = tgt(2,4);
                    end
                case -1/3
                     switch(dk_hat(n-ii-2))
                        case 1
                            temp(ii) = tgt(3,1);
                        case 1/3
                            temp(ii) = tgt(3,2);
                        case -1/3
                            temp(ii) = tgt(3,3);
                        case -1
                            temp(ii) = tgt(3,4);
                    end
                case -1
                    switch(dk_hat(n-ii-2))
                        case 1
                            temp(ii) = tgt(4,1);
                        case 1/3
                            temp(ii) = tgt(4,2);
                        case -1/3
                            temp(ii) = tgt(4,3);
                        case -1
                            temp(ii) = tgt(4,4);
                    end
            end
        end
        switch(dk_hat(n-1))
            case 1
                if dk_hatMode == 1
                    c_error = dfeCoeff(1,1:1:min(Ndfe,n-1))*temp;
                else
                    c_error = dfeCoeff(1,1:1:min(Ndfe,n-1))*dk(n-1:-1:max(n-Ndfe,1))';
                end
                vref(1,:) = vref(1,:) + c_error;
                tgt(1,:) = tgt(1,:) + c_error;
                dk(n) = ynffeo(n) - c_error;
            case 1/3
                if dk_hatMode == 1
                    c_error = dfeCoeff(2,1:1:min(Ndfe,n-1))*temp;
                else
                    c_error = dfeCoeff(2,1:1:min(Ndfe,n-1))*dk(n-1:-1:max(n-Ndfe,1))';
                end
                vref(1,:) = vref(1,:) + c_error;
                tgt(1,:) = tgt(1,:) + c_error;
                dk(n) = ynffeo(n) - c_error;
            case -1/3
                if dk_hatMode == 1
                    c_error = dfeCoeff(3,1:1:min(Ndfe,n-1))*temp;
                else
                    c_error = dfeCoeff(3,1:1:min(Ndfe,n-1))*dk(n-1:-1:max(n-Ndfe,1))';
                end
                vref(1,:) = vref(1,:) + c_error;
                tgt(1,:) = tgt(1,:) + c_error;
                dk(n) = ynffeo(n) - c_error;
            case -1
                if dk_hatMode == 1
                    c_error = dfeCoeff(4,1:1:min(Ndfe,n-1))*temp;
                else
                    c_error = dfeCoeff(4,1:1:min(Ndfe,n-1))*dk(n-1:-1:max(n-Ndfe,1))';
                end
                vref(1,:) = vref(1,:) + c_error;
                tgt(1,:) = tgt(1,:) + c_error;
                dk(n) = ynffeo(n) - c_error;
        end
        %dk(n) = ynffeo(n);
    end

    vpp_dfe = mean(abs(dk))*3/2;

    %% tMode == 1 will use known training set
    if tMode == 0
        cnt1 = 1;
        cnt2 = 1;
        cnt3 = 1;
        cnt4 = 1;
        if n == 1
            % assuming previous symbol is -1;
            if dk(n) > vref(4,1)
                dk_hat_s{4}(cnt4) = tgt(4,1);
                decoded_symbols(n) = 1;
                dk_hat(n) = 1;
            elseif dk(n) > vref(4,2)
                dk_hat_s{4}(cnt4) = tgt(4,2);
                decoded_symbols(n) = 1/3;
                dk_hat(n) = 1/3;
            elseif dk(n) > vref(4,3)
                dk_hat_s{4}(cnt4) = tgt(4,3);
                decoded_symbols(n) = -1/3;
                dk_hat(n) = -1/3;
            else
                dk_hat_s{4}(cnt4) = tgt(4,4);
                decoded_symbols(n) = -1;
                dk_hat(n) = -1;
            end
            cnt4 = cnt4+1;
        else
            switch(dk_hat(n-1))
                case 1
                    if dk(n) > vref(1,1)
                        dk_hat_s{1}(cnt1) = tgt(1,1);
                        decoded_symbols(n) = 1;
                        dk_hat(n) = 1;
                    elseif dk(n) > vref(1,2)
                        dk_hat_s{1}(cnt1) = tgt(1,2);
                        decoded_symbols(n) = 1/3;
                        dk_hat(n) = 1/3;
                    elseif dk(n) > vref(1,3)
                        dk_hat_s{1}(n) = tgt(1,3);
                        decoded_symbols(n) = -1/3;
                        dk_hat(n) = -1/3;
                    else
                        dk_hat_s{1}(n) = tgt(1,4);
                        decoded_symbols(n) = -1;
                        dk_hat(n) = -1;
                    end
                case 1/3
                    if dk(n) > vref(2,1)
                        dk_hat_s{2}(n) = tgt(2,1);
                        decoded_symbols(n) = 1;
                        dk_hat(n) = 1;
                    elseif dk(n) > vref(2,2)
                        dk_hat_s{2}(n) = tgt(2,2);
                        decoded_symbols(n) = 1/3;
                        dk_hat(n) = 1/3;
                    elseif dk(n) > vref(2,3)
                        dk_hat_s{2}(n) = tgt(2,3);
                        decoded_symbols(n) = -1/3;
                        dk_hat(n) = -1/3;
                    else
                        dk_hat_s{2}(n) = tgt(2,4);
                        decoded_symbols(n) = -1;
                        dk_hat(n) = -1;
                    end
                case -1/3
                    if dk(n) > vref(3,1)
                        dk_hat_s{3}(n) = tgt(3,1);
                        decoded_symbols(n) = 1;
                        dk_hat(n) = 1;
                    elseif dk(n) > vref(3,2)
                        dk_hat_s{3}(n) = tgt(3,2);
                        decoded_symbols(n) = 1/3;
                        dk_hat(n) = 1/3;
                    elseif dk(n) > vref(3,3)
                        dk_hat_s{3}(n) = tgt(3,3);
                        decoded_symbols(n) = -1/3;
                        dk_hat(n) = -1/3;
                    else
                        dk_hat_s{3}(n) = tgt(3,4);
                        decoded_symbols(n) = -1;
                        dk_hat(n) = -1;
                    end
                case -1
                    if dk(n) > vref(4,1)
                        dk_hat_s{4}(n) = tgt(4,1);
                        decoded_symbols(n) = 1;
                        dk_hat(n) = 1;
                    elseif dk(n) > vref(4,2)
                        dk_hat_s{4}(n) = tgt(4,2);
                        decoded_symbols(n) = 1/3;
                        dk_hat(n) = 1/3;
                    elseif dk(n) > vref(4,3)
                        dk_hat_s{4}(n) = tgt(4,3);
                        decoded_symbols(n) = -1/3;
                        dk_hat(n) = -1/3;
                    else
                        dk_hat_s{4}(n) = tgt(4,4);
                        decoded_symbols(n) = -1;
                        dk_hat(n) = -1;
                    end
            end
        end

    elseif tMode == 1
        decoded_symbols(n) = dk_hat(n);
    end

    





















